----------------Set 1:-----------------------

1.Search for a word in a text file
def search_word(filename, word):
    with open(filename, 'r') as file:
        content = file.read()
    return content.count(word)

filename = "sample.txt"  
word = "abc"
print("Occurrences:", search_word(filename, word))


2.Reverse words in a string
def reverse_words(sentence):
    return ' '.join(sentence.split()[::-1])
input_text = "Darshan University Rajkot"
print(reverse_words(input_text))


3. Merge two dictionaries
d1 = {"Name": "Abc", "Age": 22}
d2 = {"City": "Rajkot", "Sem": 4}

merged_dict = {**d1, **d2}
print(merged_dict)


4. Bank Account Class
class BankAccount:
    def __init__(self, acc_no, username, email, acc_type, balance):
        self.acc_no = acc_no
        self.username = username
        self.email = email
        self.acc_type = acc_type
        self.balance = balance

    def display_account_details(self):
        print("---------- Account Details ----------")
        print(f"Account No. : {self.acc_no}")
        print(f"Username : {self.username}")
        print(f"Email : {self.email}")
        print(f"Account type : {self.acc_type}")
        print(f"Account balance : {self.balance}")

acc = BankAccount(123456, "Abc", "abc@gmail.com", "Savings", 52361.23)
acc.display_account_details()


5. Bar Chart for Product Sales
import matplotlib.pyplot as plt

products = ["Product A", "Product B", "Product C", "Product D"]
sales = [150, 200, 250, 180]

plt.bar(products, sales, color=['red', 'blue', 'green', 'orange'])
plt.xlabel("Products")
plt.ylabel("Sales")
plt.title("Product Sales Chart")
plt.show()



-----------------------------------SET-2--------------------------

1.Convert a set into a list, string, and tuple
size = int(input("Enter set size: "))
user_set = set()

for _ in range(size):
    element = input("Enter element: ")
    user_set.add(element)

user_list = list(user_set)
user_string = ''.join(user_set)
user_tuple = tuple(user_set)

print("List :", user_list)
print("String :", user_string)
print("Tuple :", user_tuple)


2.Find the size of a file
import os

filename = "abc.txt"  # Make sure the file exists

if os.path.exists(filename):
    print("File size:", os.path.getsize(filename), "bytes")
else:
    print("File not found!")


3. Custom Exception for Negative Number
class NegativeNumberException(Exception):
    pass

try:
    num = int(input("Enter a number: "))
    if num < 0:
        raise NegativeNumberException("The number you entered is a negative number.")
    else:
        print("You entered:", num)
except NegativeNumberException as e:
    print(e)


4.Car Class with Attributes
class Car:
    def __init__(self, company, model, seats, color):
        self.company = company
        self.model = model
        self.seats = seats
        self.color = color

    def display_details(self):
        print("---------- Car details ----------")
        print(f"Car company : {self.company}")
        print(f"Car model : {self.model}")
        print(f"No of seats : {self.seats}")
        print(f"Car color : {self.color}")

company = input("Enter car company: ")
model = input("Enter car model: ")
seats = input("Enter number of seats: ")
color = input("Enter car color: ")

car = Car(company, model, seats, color)
car.display_details()


5. Simple Line Graph using Matplotlib
import matplotlib.pyplot as plt

# Sample data
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

plt.plot(x, y, marker='o', linestyle='-')
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.title("Simple Line Graph")
plt.show()


-----------------------------------SET-3--------------------------------------------
1. Count the number of lines, words, and characters in a given text file
def count_file_details(filename):
    with open(filename, "r") as file:
        text = file.read()
    
    lines = text.split("\n")
    words = text.split()
    characters = len(text)

    print("Lines:", len(lines))
    print("Words:", len(words))
    print("Characters:", characters)

# Example usage
filename = "sample.txt"  # Ensure the file exists
count_file_details(filename)


2. Generate 100 random lottery tickets and pick two lucky tickets
import random

tickets = list(range(1000, 1100))  # Generating 100 random ticket numbers
lucky_winners = random.sample(tickets, 2)  # Picking two winners

print("Winner:", lucky_winners[0])
print("Runner-up:", lucky_winners[1])



3. Find prime numbers in a given range
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def find_primes(start, end):
    primes = [num for num in range(start, end + 1) if is_prime(num)]
    print("Prime numbers:", primes)

start = int(input("Enter start range: "))
end = int(input("Enter end range: "))
find_primes(start, end)


4. Plot a chart using given data
import matplotlib.pyplot as plt

x = range(1, 11)  # x-axis values
cxMarks = [8, 9, 6, 3, 5, 7, 4, 1, 2, 6]
cyMarks = [5, 8, 9, 6, 3, 2, 4, 8, 8, 9]

plt.plot(x, cxMarks, marker='o', linestyle='-', color='r', label="Cx Marks")
plt.plot(x, cyMarks, marker='s', linestyle='--', color='b', label="Cy Marks")

plt.xlabel("X-axis")
plt.ylabel("Marks")
plt.title("Student Performance Chart")
plt.legend()
plt.text(1, min(cyMarks), "Lowest SPI", fontsize=12, color='black')

plt.show()


5. Create a Student class and initialize attributes
class Student:
    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

    def display_details(self):
        print("---------- Student Details ----------")
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
        print(f"Grade: {self.grade}")

name = input("Enter student name: ")
age = int(input("Enter student age: "))
grade = input("Enter student grade: ")

student = Student(name, age, grade)
student.display_details()


-----------------------------SET-4-----------------------------

1. Swap two numbers without using a third variable or arithmetic operator
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))

a, b = b, a  # Swapping using tuple unpacking

print("After swapping: First number =", a, ", Second number =", b)


2. Count the number of vowels in a given string
def count_vowels(string):
    vowels = "aeiouAEIOU"
    count = sum(1 for char in string if char in vowels)
    return count

string = input("Enter a string: ")
print("Number of vowels in the string:", count_vowels(string))


3. Find the intersection of two sets
set1 = set(map(int, input("Enter elements of first set separated by space: ").split()))
set2 = set(map(int, input("Enter elements of second set separated by space: ").split()))

intersection = set1 & set2  # Using '&' operator to find intersection

print("Intersection of sets:", intersection)


4. Generate a histogram for student scores in a math exam
import matplotlib.pyplot as plt

scores = [45, 78, 88, 90, 55, 73, 68, 81, 77, 95, 56, 83, 87]

plt.hist(scores, bins=5, color='blue', edgecolor='black')

plt.xlabel("Score Range")
plt.ylabel("Number of Students")
plt.title("Distribution of Mathematics Exam Scores")
plt.show()


5. Find the difference between two dates in days
from datetime import datetime

date_format = "%Y-%m-%d"  # YYYY-MM-DD format

date1 = input("Enter first date (YYYY-MM-DD): ")
date2 = input("Enter second date (YYYY-MM-DD): ")

d1 = datetime.strptime(date1, date_format)
d2 = datetime.strptime(date2, date_format)

difference = abs((d2 - d1).days)

print("Difference in days:", difference)


----------------SET-5-------------
1. Find the second-largest number in a list
def second_largest(numbers):
    unique_numbers = list(set(numbers))  # Remove duplicates
    unique_numbers.sort(reverse=True)  # Sort in descending order
    return unique_numbers[1] if len(unique_numbers) > 1 else None

numbers = [10, 20, 5, 30, 20, 25]
print("Second Largest Number:", second_largest(numbers))



2. Sort a dictionary by key
sample_dict = {3: "C", 1: "A", 4: "D", 2: "B"}
sorted_dict = dict(sorted(sample_dict.items()))  # Sort dictionary by keys

print("Sorted Dictionary:", sorted_dict)


3. Function to check if a number is prime
def is_prime(n):
    if n < 2:
        return 0
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return 0
    return 1

num = 17
print(f"Is {num} prime?:", is_prime(num))


4. Demonstrate 3 types of inheritance in Python

//Single Inheritance
class Parent:
    def func1(self):
        print("This is Parent class")

class Child(Parent):
    def func2(self):
        print("This is Child class")

obj = Child()
obj.func1()
obj.func2()

//Multiple Inheritance
class Father:
    def father_func(self):
        print("Father's property")

class Mother:
    def mother_func(self):
        print("Mother's property")

class Child(Father, Mother):
    def child_func(self):
        print("Child's own property")

obj = Child()
obj.father_func()
obj.mother_func()
obj.child_func()

//Multilevel Inheritance
class Grandparent:
    def grandparent_func(self):
        print("This is Grandparent")

class Parent(Grandparent):
    def parent_func(self):
        print("This is Parent")

class Child(Parent):
    def child_func(self):
        print("This is Child")

obj = Child()
obj.grandparent_func()
obj.parent_func()
obj.child_func()


5. Generate a histogram of students' scores
import matplotlib.pyplot as plt

scores = [45, 78, 88, 90, 55, 73, 68, 81, 77, 95, 56, 83, 87]

plt.hist(scores, bins=5, color='green', edgecolor='black')

plt.xlabel("Score Range")
plt.ylabel("Number of Students")
plt.title("Distribution of Mathematics Exam Scores")
plt.show()


-----------------SET-6------------------

1. Check if a given string is a palindrome
def is_palindrome(s):
    return s == s[::-1]

string = "madam"
print(f"Is '{string}' a palindrome?:", is_palindrome(string))


2. Demonstrate ValueError and IndexError
# ValueError example
try:
    num = int("abc")  # Cannot convert "abc" to an integer
except ValueError as e:
    print("ValueError:", e)

# IndexError example
try:
    lst = [1, 2, 3]
    print(lst[5])  # Accessing an out-of-range index
except IndexError as e:
    print("IndexError:", e)


3. Split the list into two parts and append the first part to the end
def split_and_append(lst):
    mid = len(lst) // 2  # Find middle index
    return lst[mid:] + lst[:mid]

lst = [1, 2, 3, 4, 5, 6]
print("Modified List:", split_and_append(lst))


4. Create a pie chart showing attendance percentage
import matplotlib.pyplot as plt

subjects = ["Math", "Science", "English", "History", "Computer"]
attendance = [90, 85, 80, 95, 88]

plt.pie(attendance, labels=subjects, autopct='%1.1f%%',
class BankAccount:
    def __init__(self, balance):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited: {amount}. New Balance: {self.balance}")

    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient funds!")
        else:
            self.balance -= amount
            print(f"Withdrew: {amount}. New Balance: {self.balance}")


account = BankAccount(1000)
account.deposit(500)
account.withdraw(300)
account.withdraw(1500)
 colors=['blue', 'green', 'red', 'purple', 'orange'])
plt.title("Student Attendance Percentage")
plt.show()


5. Create a BankAccount class with deposit and withdrawal methods
class BankAccount:
    def __init__(self, balance):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited: {amount}. New Balance: {self.balance}")

    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient funds!")
        else:
            self.balance -= amount
            print(f"Withdrew: {amount}. New Balance: {self.balance}")
account = BankAccount(1000)
account.deposit(500)
account.withdraw(300)
account.withdraw(1500)
